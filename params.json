{
  "name": "cpp-pthread",
  "tagline": "C++ wrapper of the pthread library",
  "body": "### What it does\r\n\r\nSome C/C++ compilers are not implementing all of C++11 and above standard, it's often lacking the concurrency features that the standard brings. These compilers will at some point be fixed and we were therefore looking at a way to reduce the effort of switching from a specific implementation to the C++11 standard one.\r\n\r\nThis projetc is the resulting code.\r\n\r\nOf course, this library is a replacement of C++11 features, it is best to use the standard implementation if your compiler support it.\r\n\r\nTo use this library:\r\n```\r\nconfigure\r\nmake\r\nmake install\r\n```\r\n\r\nInstall moves files into your system's default localtion for headers and libraries (often /usr/local/include and /usr/local/lib). Use this command to change install target directory:\r\n```\r\nconfigure --prefix=/usr/local\r\n```\r\n\r\n[Doxygen documentation](http://herbertkoelman.github.io/cpp-pthread/doc/html/) can be generated with this command. I hope this help make things easier to use and understand.\r\n```\r\nmake doxygen\r\n```\r\n\r\n> Doxygen can be downloaded [here](http://www.stack.nl/~dimitri/doxygen/index.html).\r\n\r\nThe `make` target `pkg` will produce au tar.gz that can be distributed.\r\n\r\n### How to use it\r\n\r\nOnce compiled and installed in a location that suites you, use your compiler options to reference the headers and the library directory. In almoast all casses you can:\r\n* include `#include \"pthread/phtread.hpp\"` in your code to replace of the standard includes.\r\n* comment out or the c++11 standard includes in your code\r\n* replace `std` namespace  with `pthread` ( std::condition_variable becomes pthread::condition_variable, etc)\r\n\r\nSample code can be found in the `tests` directory. To use it, run the following commands:\r\n```\r\ncd tests\r\n./configure\r\n./make\r\n```\r\n\r\n### Usefull links\r\n\r\n#### Memory management on AIX\r\n\r\nMemory management on AIX is quite sophisticated making it possible to fine tuned very precisely the way your program uses memory. Consider using these compiler/linker options when using pthreads:\r\n* -bmaxdata:0xN0000000 this option activates the large memory model, N is a number in the range of [1-8].\r\n* -bmaxmem=-1 this option tell the compiler to use as much memory it needs (usefull when -O option is used).\r\n\r\nThread stack size:\r\n* 32bits programs allocate 96KB per thread on the program's heap.\r\n* 64bits programs allocate 192KB per thread on the program's heap.\r\n\r\nOn many Linux implementations and on Mac OS X the stack size is defaulted to 8MB. You may consider setting this as a default.\r\n\r\nMore detailed information can be found in this [RedBook](http://www.redbooks.ibm.com/redbooks/pdfs/sg245674.pdf) (chapter 8).\r\n\r\n#### project links\r\n\r\n* [project's home](https://github.com/HerbertKoelman/cpp-pthread)\r\n* [project's doxygen](http://herbertkoelman.github.io/cpp-pthread/doc/html/)\r\n\r\n#### other\r\n\r\n* POSIX Threads [documentation](http://pubs.opengroup.org/onlinepubs/007908799/xsh/threads.html)\r\n* [std::thread](http://en.cppreference.com/w/cpp/thread/thread) implementation we try to mimic\r\n* [std::lock_guard](http://en.cppreference.com/w/cpp/thread/lock_guard/lock_guard)  implementation we try to mimic \r\n* [std::mutex](http://en.cppreference.com/w/cpp/thread/mutex) implementation we try to mimic\r\n* [std::condition_variable](http://en.cppreference.com/w/cpp/thread/condition_variable) implementation we try to mimic\r\n\r\n### misc\r\n\r\n* author herbert koelman\r\n* github [cpp-pthread](https://github.com/HerbertKoelman/cpp-pthread)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}